services:
  # Build the base image first - used only for building
  backend-base:
    build:
      context: .
      dockerfile: docker/backend-base.Dockerfile
    image: turni-backend-base:latest
    profiles: ["build"]  # Only used for building, not as a service
    networks:
      - tournament-net

  # API Gateway
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - tournament-service
      - team-service
      - match-service
      - notification-service
      - frontend-service
    networks:
      - tournament-net

  # Authentication Service
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    env_file:
      - .env
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - tournament-net
    # Explicitly set hostname
    hostname: auth-service
    volumes:
      - ./common:/app/common

  # Tournament Service
  tournament-service:
    container_name: tournament-service
    build:
      context: .
      dockerfile: tournament-service/Dockerfile
    env_file:
      - .env
    depends_on:
      tournament-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - tournament-net
    hostname: tournament-service
    volumes:
      - ./common:/app/common

  # Team Service
  team-service:
    container_name: team-service
    build:
      context: .
      dockerfile: team-service/Dockerfile
    env_file:
      - .env
    depends_on:
      team-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      tournament-service:
        condition: service_started
    networks:
      - tournament-net
    hostname: team-service
    volumes:
      - ./common:/app/common

  # Match Service
  match-service:
    container_name: match-service
    build:
      context: .
      dockerfile: match-service/Dockerfile
    env_file:
      - .env
    depends_on:
      match-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      team-service:
        condition: service_started
      tournament-service:
        condition: service_started
    networks:
      - tournament-net
    hostname: match-service
    volumes:
      - ./common:/app/common

  # Notification Service
  notification-service:
    container_name: notification-service
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    env_file:
      - .env
    depends_on:
      notification-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - tournament-net
    hostname: notification-service
    volumes:
      - ./common:/app/common

  # Frontend Service
  frontend-service:
    container_name: frontend-service
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:80"
    networks:
      - tournament-net
    hostname: frontend-service

  # Databases
  auth-db:
    container_name: auth-db
    image: postgres:15-alpine
    volumes:
      - auth_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=auth_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tournament-net
    hostname: auth-db

  tournament-db:
    container_name: tournament-db
    image: postgres:15-alpine
    volumes:
      - tournament_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=tournament_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d tournament_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tournament-net
    hostname: tournament-db

  team-db:
    container_name: team-db
    image: postgres:15-alpine
    volumes:
      - team_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=team_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d team_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tournament-net
    hostname: team-db

  match-db:
    container_name: match-db
    image: postgres:15-alpine
    volumes:
      - match_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=match_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d match_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tournament-net
    hostname: match-db

  notification-db:
    container_name: notification-db
    image: postgres:15-alpine
    volumes:
      - notification_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=notification_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tournament-net
    hostname: notification-db

  # Add service for running tests on the monolithic Django app
  django-tests:
    container_name: django-tests
    build:
      context: .
      dockerfile: docker/backend-base.Dockerfile  # Use the same base image
    volumes:
      - ./project:/app/project
    working_dir: /app/project
    environment:
      - DJANGO_SETTINGS_MODULE=project.settings
      - DATABASE_URL=sqlite:///db.sqlite3
    command: ["/bin/bash", "-c", "pip install Django>=3.2,'<'4.0 psycopg2-binary>=2.9.1 djangorestframework>=3.12.0 factory-boy>=3.2.0 pydantic>=1.8.2 python-dotenv>=0.19.0 gunicorn>=20.1.0 whitenoise>=5.3.0 pytest>=7.3.1 pytest-django>=4.5.2 pytest-asyncio>=0.21.0 Pillow>=10.0.0 celery>=5.3.4 python-dateutil>=2.8.2 matplotlib && python manage.py test"]
    profiles: ["tests"]

volumes:
  auth_data:
  tournament_data:
  team_data:
  match_data:
  notification_data:

networks:
  tournament-net:
    driver: bridge
    internal: true  # Keep services internal